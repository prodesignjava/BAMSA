package com.bamsa.db.dao.impl;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import com.bamsa.db.beans.CandidateInfoBean;
import com.bamsa.db.beans.CandidateJobInfoBean;
import com.bamsa.db.beans.CandidateSkillsInfoBean;
import com.bamsa.db.dao.CandidateInfoDAO;

@Repository
public class CandidateInfoDAOImpl implements CandidateInfoDAO{
	@Autowired
	private Properties dbProps;
	@Autowired
	private JdbcTemplate jdbcTemplate;
	private static Logger logger = Logger.getLogger(CandidateInfoDAOImpl.class);
	@Override
	public CandidateInfoBean saveCandidatedetails(CandidateInfoBean details) {
		logger.info("enter into saveCandidatedetails");
		DataSource dataSource = jdbcTemplate.getDataSource();
		try{
		if(null != details){
			SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource);
			
			Map<String,Object> recordParameters = new HashMap<String,Object>();
			recordParameters.put("firstname", details.getFirstName());
			recordParameters.put("middlename", details.getMiddleName());
			recordParameters.put("lastname", details.getLastName());
			recordParameters.put("email", details.getEmailid());
			recordParameters.put("phone", details.getPhoneNo());
			recordParameters.put("mobile", details.getMobile());
			recordParameters.put("country", details.getCountry());
			recordParameters.put("currentlocation", details.getCurrentLoc());
			recordParameters.put("address",details.getAddress());
			recordParameters.put("preferredlocation1",details.getPreferredLoc1());
			recordParameters.put("preferredlocation2", details.getPreferredLoc2());
			recordParameters.put("zipCode", details.getZipCode());
			recordParameters.put("availablefrom", details.getAvailableFrom());
			recordParameters.put("noticeperiod", details.getNoticePeriod());
			recordParameters.put("sourcedby", details.getSourcedBy());
			recordParameters.put("sourcedfrom", details.getSourcedFrom());
			recordParameters.put("licenseno", details.getLicenseNo());
			recordParameters.put("passportno", details.getPassportNo());
			recordParameters.put("visastatus", details.getVisaStatus());
			recordParameters.put("dateofbirth", details.getDob());
			recordParameters.put("gender", details.getGender());
			recordParameters.put("fathername", details.getFatherName());
			recordParameters.put("mothername", details.getMotherName());
			recordParameters.put("nationality", details.getNationality());
			recordParameters.put("hobbies", details.getHobbies());
			recordParameters.put("maritalstatus", details.getMaritalStatus());
			recordParameters.put("candidatedescription", details.getCandidateDesc());
			recordParameters.put("assignedto", details.getAssignedto());
			recordParameters.put("iporhp", details.getInpipleOrhighpofile());
			recordParameters.put("createddate", details.getCreatedDate());
			logger.info(recordParameters);
            jdbcInsert.withTableName("candidateinformation")
			.usingGeneratedKeyColumns("ciid");	
			details.setCiid(jdbcInsert.executeAndReturnKey(recordParameters).intValue());
		}
		}catch(Exception e){
			logger.error(e.getMessage());
		}
		logger.info("exit from saveCandidatedetails");
		return details;		
	}
	@Override
	public CandidateJobInfoBean saveCandidatejobdetails(CandidateJobInfoBean details) {
		logger.info("enter into saveCandidatejobdetails");
		DataSource dataSource = jdbcTemplate.getDataSource();
		try{
		if(null != details){
			SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource);
			
			Map<String,Object> recordParameters = new HashMap<String,Object>();
			
			recordParameters.put("candidatecategory", details.getCandidateCategory());
			recordParameters.put("candidatesubcategory", details.getCandidateSubcategory());
			recordParameters.put("candidatenoofjobschanged", details.getCandidateNoofjobschanged());
			recordParameters.put("currentemployer", details.getCurrentEmployer());
			recordParameters.put("totalworkexpyrs", details.getTotalworkExpyrs());
			recordParameters.put("totalworkexpmonths", details.getTotalworkExpmonths());
			recordParameters.put("gapperiod", details.getGapPeriod());
			recordParameters.put("relexp", details.getRelevantexp());
			recordParameters.put("jobtitle", details.getJobtitile());
			recordParameters.put("objectives", details.getObjectives());
			recordParameters.put("achievements", details.getAchievments());
			recordParameters.put("creferences", details.getReferences());
			recordParameters.put("ciid", details.getCiid());
			logger.info(recordParameters);
            jdbcInsert.withTableName("candidatejobinfo")
			.usingGeneratedKeyColumns("cjid");	
			details.setCjid(jdbcInsert.executeAndReturnKey(recordParameters).intValue());
		}
		}catch(Exception e){
			logger.error(e.getMessage());
		}
		logger.info("exit from saveCandidatejobdetails");
		return details;		
	
	}
	@Override
	public CandidateSkillsInfoBean saveCandidateskillsdetails(CandidateSkillsInfoBean skilldetails) {
		logger.info("enter into saveCandidateskillsdetails");
		DataSource dataSource = jdbcTemplate.getDataSource();
		try{
		if(null != skilldetails){
			SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(dataSource);
			
			Map<String,Object> recordParameters = new HashMap<String,Object>();
			recordParameters.put("ciid", skilldetails.getCiid());
			recordParameters.put("resumetitle", skilldetails.getResumetitle());
			recordParameters.put("resumefilename", skilldetails.getResumefilename());
			recordParameters.put("qualification", skilldetails.getQualification());
			recordParameters.put("languagesknown", skilldetails.getLanguagesknown());
			recordParameters.put("currentsalary", skilldetails.getCurrentsalary());
			recordParameters.put("expectedsalary",skilldetails.getExpectedsalary());
			recordParameters.put("primaryskills", skilldetails.getPrimaryskills());
			
			logger.info(recordParameters);
            jdbcInsert.withTableName("candidateskillsinfo")
			.usingGeneratedKeyColumns("csiid");	
			skilldetails.setCsiid(jdbcInsert.executeAndReturnKey(recordParameters).intValue());
		}
		}catch(Exception e){
			logger.error(e.getMessage());
		}
		logger.info("exit from saveCandidatejobdetails");
		return skilldetails;		
	}

}
