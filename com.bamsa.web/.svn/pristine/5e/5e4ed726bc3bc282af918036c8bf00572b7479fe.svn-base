package com.bamsa.web.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.Base64Utils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.bamsa.web.builder.UserBuilder;

import com.bamsa.db.exceptions.DBUpdateException;
import com.bamsa.web.model.DepartmentModel;
import com.bamsa.web.model.EmployeeDetailsModel;
import com.bamsa.web.model.EmployeeModel;
import com.bamsa.web.model.EmployeeTaskModel;
import com.bamsa.web.model.UserBean;
import com.bamsa.web.service.UserService;
import com.bamsa.web.util.ApplicationConstants;

@Controller
public class EmployeeRegistrationController {
	
	@Autowired
	UserService userServiceImpl;
	 @Autowired
	 private JavaMailSender mailSender;
	
	private static Logger logger = Logger.getLogger(EmployeeRegistrationController.class);
	@RequestMapping("/registration")
	public String showRegistration(HttpServletRequest request){
		logger.info("Enter into showRegistration");
		List<EmployeeDetailsModel> employeedetails= userServiceImpl.getEmployees();
		logger.info(employeedetails);
		request.setAttribute("details",employeedetails);
		 List<String> branchnames = userServiceImpl.getBranchNameDetails();
		 request.setAttribute("report",branchnames);	
		logger.info("Exit From showRegistration");

		return "RegistrationForm";
	}
	
	@RequestMapping("/registerEmployee")
	public String RegisterUser(@RequestParam("picture") MultipartFile file,HttpServletRequest request){
		logger.info("Enter into showRegistration");
		
		EmployeeDetailsModel employeeRegDetails = buildEmployeeRegistrationDetails(request);
		
		
		try{
		try{
		if (!file.isEmpty()) {
			 byte[] pictureBytes = file.getBytes();					
				if(pictureBytes.length < ApplicationConstants.MAX_FILE_SIZE){
					employeeRegDetails.setPicture(pictureBytes);
				}else{
					request.setAttribute("message", "Select Appropriate Picture");
					return "forward:/registration";
				}	
	        }
		}catch(Exception e){
			request.setAttribute("message", "File is Empty");
			logger.error(e.getMessage());
			return "forward:/registration";
		}
		employeeRegDetails = userServiceImpl.registerEmployee(employeeRegDetails,request);
		if(null!=employeeRegDetails){
			
				  // takes input from e-mail form
		        String recipientAddress = employeeRegDetails.getEmail();
		        int firstthree =Integer.valueOf(employeeRegDetails.getMobileNo().substring(0, 3));
				int lastthree =Integer.valueOf(employeeRegDetails.getMobileNo().substring(employeeRegDetails.getMobileNo().length()-3));
				int total =(firstthree*3)+(lastthree*3);
				StringBuilder sb = new StringBuilder();
				sb.append(Integer.toString(total));
				sb.append(employeeRegDetails.getEmpId());
		        String password= sb.toString();
		        String subject = "Greetings..! Your login Credentials for BAMSA";
		        String message = "Hi, You have been successfully added to our employee database"
		        		+ ". Here are your credentials for login into the BAMSA application.The password"
		        		+ " is autogenerated and you can change it using Reset password option provided in our appli"
		        		+ "cation. Please change the password as early as possible for more security.\n"
		        		+ "Username:"+employeeRegDetails.getEmpId()+"\nPassword:"+password;
		      
		        // prints debug info
		        logger.info("To: " + recipientAddress);
		        logger.info("Subject: " + subject);
		        logger.info("Message: " + message);
		         
		        // creates a simple e-mail object
		        SimpleMailMessage email = new SimpleMailMessage();
		       
		        	email.setTo(recipientAddress);
		        	email.setSubject(subject);
		            email.setText(message);
		           
		             
		            // sends the e-mail
		            mailSender.send(email);
				
		}
		logger.info(employeeRegDetails);
		}catch(Exception e){
			logger.error(e.getMessage());
			request.setAttribute("message", "Details Exist");
			return "forward:/registration" ;
		}
		request.setAttribute("successmessage", "Registration Successfull");
		logger.info("Exit From showRegistration");
		return "forward:/registration";
		
	}
	
	
	
	
	
	public EmployeeDetailsModel buildEmployeeRegistrationDetails(HttpServletRequest request){
		logger.info("Enter into buildEmployeeRegistrationDetails");
		EmployeeDetailsModel regDetails = new EmployeeDetailsModel();
		try{
		regDetails.setUid(Integer.valueOf(request.getParameter("uid")));
		regDetails.setName(request.getParameter("name"));
		regDetails.setMobileNo(request.getParameter("mobno"));
		
		if(!request.getParameter("dob").equals(null)){
			if(StringUtils.isNotBlank(request.getParameter("dob"))){
				DateFormat format = new SimpleDateFormat("dd-MM-yyyy");
				
				
				regDetails.setDob(format.parse(request.getParameter("dob")));
			}
		}
		DateFormat formatn = new SimpleDateFormat("dd-MM-yyyy");
		regDetails.setDoj(formatn.parse(request.getParameter("doj")));
		regDetails.setEmail(request.getParameter("email"));
		if(null!=(request.getParameter("emermobno"))){
		regDetails.setEmergencyMobileNo(request.getParameter("emermobno"));
		}
		regDetails.setEmpId(request.getParameter("empid"));
		regDetails.setGender(request.getParameter("gender").charAt(0));
		regDetails.setHierarchyId(Integer.valueOf(request.getParameter("reportingto")));
		DateFormat timeformat = new SimpleDateFormat("HH:mm");
		regDetails.setInTime(timeformat.parse(request.getParameter("intime")));
		regDetails.setOutTime(timeformat.parse(request.getParameter("outtime")));
		
		regDetails.setStreamId(Integer.valueOf(request.getParameter("stream")));
		regDetails.setDesigId(Integer.valueOf(request.getParameter("designation")));
		regDetails.setSalary(Float.valueOf(request.getParameter("salary")));
		regDetails.setBranchname(request.getParameter("bname"));
		logger.info(request.getParameter("designation"));
		logger.info(regDetails);
		}catch(Exception e){
			logger.error(e.getMessage());
		}
		logger.info("Exit From buildEmployeeRegistrationDetails");
		return regDetails;
	}
	
	@RequestMapping("/modify")
	public String getEmpDetails(HttpServletRequest request,Model model) throws ParseException
	{
		logger.info("enter into getEmpDetails");
		UserBean userData = (UserBean) request.getSession().getAttribute(ApplicationConstants.LOGIN_BEAN);
		int uid=0;
		if(null!=userData){
		uid =userData.getUid();
		}
		EmployeeDetailsModel empModelDetails = userServiceImpl.getEmployeeDetails(uid);
		
		DateFormat format = new SimpleDateFormat("dd-MM-yyyy");
		
		String d=format.format(empModelDetails.getDob());
		empModelDetails.setDateofbirth(d);
		StringBuilder sb = new StringBuilder();
		sb.append("data:image/jpeg;base64,");
		sb.append(Base64Utils.encodeToString(empModelDetails.getPicture()));
		empModelDetails.setProfilepic(sb.toString());
		if(empModelDetails.getEmergencyMobileNo()==null){
			empModelDetails.setEmergencyMobileNo("");
		}
		
		model.addAttribute("EmployeeDetails",empModelDetails );
		logger.info("exit from getEmpDetails");
		return "EmpDetails";
		
	}
	
	@RequestMapping("/update")
	public String showEmpDetisls(HttpServletRequest request) throws DBUpdateException
	{
		logger.info("Enter into showEmpDetisls");
		try{
		EmployeeDetailsModel updateDetails = buildupdateEmployeeDetails(request);
		updateDetails = userServiceImpl.updateEmployeeDetails(updateDetails);
		request.setAttribute("userupdatedvalues",updateDetails);
		request.setAttribute("successmessage", "Your Details Updated Successfully");
		return "forward:/modify";	
		}catch(Exception e){
			logger.error(e.getMessage());
			request.setAttribute("message","SORRY! Failed to update your Details");
			logger.info("Exit From showEmpDetisls");
			return "forward:/modify";	
		}
	}
	
	
	public EmployeeDetailsModel buildupdateEmployeeDetails(HttpServletRequest request) throws ParseException{
		logger.info("Enter into buildupdateEmployeeDetails");
		UserBean userData = (UserBean) request.getSession().getAttribute(ApplicationConstants.LOGIN_BEAN);
		int uid =userData.getUid();
		EmployeeDetailsModel updatedDetails = new EmployeeDetailsModel();
		try{
			logger.info(request.getParameter("name"));
			
			
			updatedDetails.setUid(uid);
			updatedDetails.setName(request.getParameter("name"));
			updatedDetails.setMobileNo(request.getParameter("mobno"));
		    DateFormat format = new SimpleDateFormat("dd-MM-yyyy");
		
			updatedDetails.setDob(format.parse(request.getParameter("dob")));
		
		    updatedDetails.setEmail(request.getParameter("email"));
		   
		    if(!request.getParameter("emermobno").equals("")){
		   
			updatedDetails.setEmergencyMobileNo(request.getParameter("emermobno"));
		
		    }
		updatedDetails.setGender(request.getParameter("gender").charAt(0));
		}catch(Exception e)
		{
			logger.info(e.getMessage());
		}
		logger.info(updatedDetails);
		logger.info("exit from buildupdateEmployeeDetails");
		return updatedDetails;
	}
	
	
	@RequestMapping("/Employees")
	public String showAllEmployyes(HttpServletRequest request,Model model)
	{
		logger.info("Enter into showAllEmployyes");
		String ResultPage ="userdepartments";
		try{
			
		
		List<EmployeeModel> allEmployees = userServiceImpl.getEmployeesUnderUser(0);
		List<EmployeeModel> departmentswise =new ArrayList<EmployeeModel>();
		if(null!=request.getParameter("sid")){
		int sid=Integer.valueOf(request.getParameter("sid"));
		
		for(EmployeeModel emp :allEmployees){
				if(sid==emp.getStreamid()){
					departmentswise.add(emp);
		}
		}
		switch(sid)
		{
			case 1:if(sid==1)
	           {
				request.setAttribute("stream", " of JAVA Developers");
		
	           }
				break;
			case 2: if(sid==2)
	            {
		  		request.setAttribute("stream", "of PHP Developers");  			
	            }
	  			break;
			case  3:if(sid==3)
	  			{
		  	request.setAttribute("stream", "of Mobile Application Developer");  			
	  			}
	  			break;
			case  4:if(sid==4)
	  			{
		  		request.setAttribute("stream", "of UI Developers");  			
	  			}
      			break;
			case  5:if(sid==5)
	  			{
		  		request.setAttribute("stream", "of ACCOUNTS Department");  			
	  			}
	  			break;
	  		case  6:if(sid==6)
	  				{
	  				request.setAttribute("stream", " of ADMINISTRATION & OPERATION Department");  			
	  				}
	  			break;
	  		case  7:if(sid==7)
	  				{
	  				request.setAttribute("stream", " of BenchSales Recruitment Department");  			
	  				}
	  				break;
	  		case  8:if(sid==8)
				{
					request.setAttribute("stream", " of US IT Recruitment Department");  			
				}
				break;        
	  		case  9:if(sid==9)
	  				{
	  					request.setAttribute("stream", " of Payroll & Compensation Department");  			
	  				}
	  				break;        
	  		case  10:if(sid==10)
	  				{
	  					request.setAttribute("stream", " of Training & Development Department");  			
	  				}
	  				break;
    
	  		case  11:if(sid==11)
	  				{
	  					request.setAttribute("stream", " of Business Development Department");  			
	  				}
	  				break;
	  		case  12:if(sid==12)
				{
					request.setAttribute("stream", " of Testing Department");  			
				}
				break;
	  		case  13:if(sid==13)
			{
				request.setAttribute("stream", " of HR Executive Department");  			
			}
			break;
    
			}
		request.setAttribute("Employees", departmentswise);
		ResultPage="AllEmployees";
	
	}
	
	}catch(Exception e){
		logger.error(e.getMessage());
	}
	logger.info("exit from getAllEmployees");
	return ResultPage;
}
	@RequestMapping("/EmployeeMappings")
    public String getEmplDetails(HttpServletRequest request)
    {
        logger.info("enter into getEmplDetails");
        UserBean userData = (UserBean) request.getSession().getAttribute(ApplicationConstants.LOGIN_BEAN);
        int uid = userData.getUid();
        EmployeeDetailsModel empModelDetails= userServiceImpl.getEmplDetails(uid);
        logger.info(empModelDetails);
        request.setAttribute("EmployeeDetails",empModelDetails );
        
        logger.info("exit from getEmplDetails");
        return "AllEmployeeDetails";
        
        
    }
	@RequestMapping("/editregistration")
	public String editregistration(HttpServletRequest request)
    {	
		List<EmployeeDetailsModel> employeedetails= userServiceImpl.getEmployees();
		logger.info(employeedetails);
		
		request.setAttribute("details",employeedetails);
		 List<String> branchnames = userServiceImpl.getBranchNameDetails();
		 request.setAttribute("report",branchnames);	
        return "EmployeeRegistrationEdit";
        
        
    }
	@RequestMapping(value="/registrationedit",produces = "application/json")
	public @ResponseBody EmployeeDetailsModel editDetails(HttpServletRequest request)  throws IOException{
		int uid = Integer.valueOf(request.getParameter("uid"));
		EmployeeDetailsModel model = new EmployeeDetailsModel();
		model= userServiceImpl.getEmplDetails(uid);
		return model;
		
	}
	
	@RequestMapping("/reportTo")
	public String  editEmployeeDetails(HttpServletRequest request){
		try{
		int uid = Integer.valueOf(request.getParameter("uid"));
		int hid =Integer.valueOf(request.getParameter("hid"));
		int sid=Integer.valueOf(request.getParameter("stream"));
		int did=Integer.valueOf(request.getParameter("designation"));
		float salary=Float.valueOf(request.getParameter("salary"));
		String branch=(request.getParameter("bname"));
		EmployeeDetailsModel model = new EmployeeDetailsModel();
		model.setUid(uid);
		model.setHierarchyId(hid);
		model.setStreamId(sid);
		model.setDesigId(did);
		model.setSalary(salary);
		model.setBranchname(branch);  
		
		model=userServiceImpl.updateEmployeeReporttoDetails(model);
		}catch(Exception e)
		{  
			 request.setAttribute("message", "Details not updated successfully");
			logger.info(e.getMessage()); 
			return "forward:/editregistration";  
		}
		
		request.setAttribute("successmessage", "Details updated successfully");
		return "forward:/editregistration";
		
	}
	
}